*project-enter.nvim.txt*       For NVIM v0.8.0       Last change: 2025 June 29

==============================================================================
Table of Contents                       *project-enter.nvim-table-of-contents*

1. project-enter.nvim                  |project-enter.nvim-project-enter.nvim|
  - ✨ Features          |project-enter.nvim-project-enter.nvim-✨-features|
  - 📦 Installation|project-enter.nvim-project-enter.nvim-📦-installation|
  - 🚀 Usage              |project-enter.nvim-project-enter.nvim-🚀-usage|
  - ⚙️ Configuration|project-enter.nvim-project-enter.nvim-⚙️-configuration|
  - 🐛 Debugging      |project-enter.nvim-project-enter.nvim-🐛-debugging|

==============================================================================
1. project-enter.nvim                  *project-enter.nvim-project-enter.nvim*

A lightweight Neovim plugin that detects when you enter a project and triggers
a custom `User` event. Its primary use case is to conditionally load other
plugins with `lazy.nvim` based on the project type.


✨ FEATURES              *project-enter.nvim-project-enter.nvim-✨-features*

- Automatically detects project root based on configurable markers (e.g., `.git`, `init.lua`).
- Triggers a `User ProjectEnter <Pattern>` event when a specific file is found in the project root.
- Zero-config required for basic usage.
- Debug mode for easy troubleshooting.


📦 INSTALLATION    *project-enter.nvim-project-enter.nvim-📦-installation*

Install with your favorite plugin manager.


LAZY.NVIM ~

>lua
    {
      "Butterblock233/project-enter.nvim",
      event = "VeryLazy" -- Make sure the plugin can load properly
      -- No configuration needed for basic usage
    }
<


🚀 USAGE                  *project-enter.nvim-project-enter.nvim-🚀-usage*

The main way to use this plugin is with the `event` trigger in `lazy.nvim`. The
event format is `"User ProjectEnter <Pattern>"`. `<Pattern>` can be either a
file or a directory.

**Example**: Conditionally load `git-signs.nvim` only in git repositories.

>lua
    {
      "lewis6991/gitsigns.nvim",
      event = "User ProjectEnter .git",
      -- other configs...
    }
<

**Example**: Load `uv.nvim` in Python projects.

>lua
    {
      "benomahony/uv.nvim",
      cond = true,
      event = "User ProjectEnter pyproject.toml",
      -- opts = {},
    }
<

When you open a file inside a project containing `.git` or `pyproject.toml` in
its root, the corresponding `User ProjectEnter` event will be fired, and
`lazy.nvim` will load the plugin.


⚙️ CONFIGURATION*project-enter.nvim-project-enter.nvim-⚙️-configuration*


  [!Caution] This Part is still WIP. Normally, this plugin does not need extra
  configurations
You can configure the plugin by calling the `setup()` function.

**Default configuration**:

>lua
    require("project-enter").setup({
      root_markers = {
        ['.git'] = 'directory',
        ['init.lua'] = 'file',
      },
    })
<


ROOT_MARKERS ~

A table that defines what files or directories mark a project root. - The key
is the name of the file or directory (e.g., `'.git'`). - The value is the type,
either `'file'` or `'directory'`.

**Example**: Add `.project` file and `_darcs` directory as root markers.

>lua
    require("project-enter").setup({
      root_markers = {
        ['.git'] = 'directory',
        ['init.lua'] = 'file',
        ['.project'] = 'file',
        ['_darcs'] = 'directory',
      },
    })
<


🐛 DEBUGGING          *project-enter.nvim-project-enter.nvim-🐛-debugging*

To enable debug messages, set the `DEBUG` (or `vim.env.DEBUG`) environment
variable to `"true"` before starting Neovim.

>sh
    DEBUG=true nvim
<

The plugin will then print detailed information about its execution, such as
the detected project root and the events being triggered.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
